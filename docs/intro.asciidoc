[[intro]]
== Introduction

Centralized logging for .NET applications with the Elastic stack made easy.

[role="screenshot"]
image:https://user-images.githubusercontent.com/2163464/62682932-9cac3600-b9bd-11e9-9cc3-39e907280f8e.png[]

[float]
=== What is ECS?

Elastic Common Schema (ECS) defines a common set of fields for ingesting data into Elasticsearch.
For more information about ECS, visit the {ecs-ref}/ecs-reference.html[ECS Reference Documentation].

[float]
=== What is ECS logging?

ECS integrations allow the use of Elastic Common Schema with your favorite logging library.
They make it easy to format your logs into ECS-compatible JSON.

[float]
=== Why ECS logging?

*No parsing of the log file required*::
+
--
ECS-compatible JSON doesn't require the use of Logstash or grok parsing via an ingest node pipeline.
--

*Decently human-readable JSON structure*::
+
--
The first three fields are always `@timestamp`, `log.level` and `message`.
It's also possible to format stack traces so that each element is rendered in a new line.
--

*Enjoy the benefits of a common schema*::
+
--
Use the Kibana {observability-guide}/monitor-logs.html[Logs app] without additional configuration.

Using a common schema across different services and teams makes it possible create reusable dashboards and avoids {ref}/mapping.html#mapping-limit-settings[mapping explosions].
--

*APM Log correlation*::
+
--
If you are using the {apm-dotnet-ref}/index.html[Elastic APM .NET agent],
you can leverage the {apm-dotnet-ref}/log-correlation.html[log correlation feature] without any additional configuration.
This lets you jump from the {kibana-ref}/spans.html[Span timeline in the APM UI] to the {observability-guide}/monitor-logs.html[Logs app],
showing only the logs which belong to the corresponding request.
Vice versa, you can also jump from a log line in the Logs UI to the Span Timeline of the APM UI.
--

[float]
==== Additional advantages when using in combination with Filebeat

We recommend using this library to log into a JSON log file and using Filebeat to send the logs to Elasticsearch. Here are a few benefits to this approach.

*Resilient in case of outages*::
+
--
{filebeat-ref}/how-filebeat-works.html#at-least-once-delivery[Guaranteed at-least-once delivery]
without buffering within the application, thus no risk of `OutOfMemoryError` s or lost events.
There's also the option to use either the JSON logs or plain-text logs as a fallback.
--

*Loose coupling*::
+
--
The application does not need to know the details of the logging backend (URI, credentials, etc.).
You can also leverage alternative {filebeat-ref}/configuring-output.html[Filebeat outputs],
like Logstash, Kafka or Redis.
--

*Index Lifecycle management*::
+
--
Leverage Filebeat's default {filebeat-ref}/ilm.html[index lifecycle management settings].
This is much more efficient than using daily indices.
--

*Efficient Elasticsearch mappings*::
+
--
Leverage Filebeat's default ECS-compatible {filebeat-ref}/configuration-template.html[index template]
--
